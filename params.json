{"name":"Gridgraphy","tagline":"Gridgraphy is a highly configurable, and incredibly flexible Compass extension that enables you to quickly and easily build semantic CSS grids.","body":"# About\r\n\r\nGridgraphy is a highly configurable, and incredibly flexible [Compass](http://compass-style.org/) extension\r\nthat enables you to quickly and easily build semantic CSS grids. Whether you're developing a small single page site or architecting a large scale responsive grid system, Gridgraphy will help you get the job done faster.\r\n\r\n\r\n- [Installation](#installation)\r\n- [Getting Started](#getting-started)\r\n- [Types](#types)\r\n- [Mixins](#mixins)\r\n- [Functions](#functions)\r\n- [Demo](#demo)\r\n\r\n\r\n# Installation\r\n\r\nInstall Gridgraphy by running the following from the command line:\r\n\r\n```bash\r\n$ gem install gridgraphy\r\n```\r\nOnce Gridgraphy is installed you can either create a new Compass project based on Gridgraphy by running the following from the command line:\r\n\r\n```bash\r\n$ compass create <project_name> -r gridgraphy -u gridgraphy\r\n```\r\n\r\nOr you can add Gridgraphy to an existing Compass project by adding the following to your projects **config.rb**:\r\n\r\n```ruby\r\nrequire 'gridgraphy'\r\n```\r\n\r\n\r\n# Getting Started\r\n\r\n## Basic\r\n\r\nYou can import the Gridgraphy extension by adding the following line to one of your [Sass/SCSS](http://sass-lang.com/) stylesheet(s):\r\n\r\n```scss\r\n@import gridgraphy\r\n```\r\n\r\n### Configurable Variables\r\n\r\nYou can mix and match different configurations to acheive the exact type of grid you need.\r\n\r\n- **$grid-type** [default: **full**] - The [type](#types) of grid. [[full](#full-grid), [right](#right-grid), [center](#center-grid), [left](#left-grid)]\r\n- **$grid-max-width** [default: **960px**] - The maximum width of the grid in px.\r\n- **$grid-gutter-width** [default: **20px**] - The gutter spacing in px between columns.\r\n- **$grid-column-count** [default: **12**] - The total number of columns in the grid.\r\n- **$grid-show** [default: **false**] - Set ```true``` to highlight the grid row & columns.\r\n\r\n**That's it!** You now have access to all of the mixins and functions that Gridgraphy provides.\r\n\r\n\r\n---\r\n\r\n## Scaffolding\r\n\r\nScaffolding is a quick way to generate classes for a grid. If you plan on adding your grid classes directly to your markup\r\nor want to export a pre-made grid as part of an external library, scaffolding can save you a ton of time.\r\n\r\nYou can create a new compass project using scaffolding by running:\r\n\r\n```bash\r\n$ compass create <project_name> -r gridgraphy -u gridgraphy/scaffolding\r\n```\r\n\r\nOr you can add scaffolding to an existing project by adding the following line to any of your [Sass/SCSS](http://sass-lang.com/) stylesheet(s):\r\n\r\n```scss\r\n@import gridgraphy/scaffolding\r\n```\r\n\r\n### Configurable Variables\r\n\r\n- **$grid-namespace-base** [default: **grid**] - The name of the prefix that will be used for the grids row & columns class.\r\n- **$grid-namespace-row** [default: **row**] - The name of the suffix that will be used for the grids row class.\r\n- **$grid-namespace-column** [default: **column**] - The name of the suffix that will be used for the grids column class.\r\n\r\n\r\n# Types\r\nGridgraphy ships with **4** different types of grid layouts. By default grids are created using the value you've set for the ```$grid-type``` [configuration variable](#configurable-variables), but can be set manually on each ```grid-*``` mixin or function.\r\n\r\n## Full Grid\r\nThe full grid type does not have a gutter between columns.\r\n\r\n## Right Grid\r\nThe right grid type has its gutter distributed to the right side of each column.\r\n\r\n## Center Grid\r\nThe center grid type has its gutter split in half and evenly distributed to both sides of each column.\r\n\r\n## Left Grid\r\nThe left grid type has its gutter distributed the the left side of each column.\r\n\r\n\r\n# Mixins\r\n\r\n#### grid-row($max-width)\r\nSets an element as the container for your columns.\r\n\r\n- **$max-width** [default: **$grid-max-width**] - The maximum width in pixels the row should span.\r\n\r\n```sass\r\n.grid-row\r\n    @include grid-row(960px)\r\n```\r\n\r\n***\r\n\r\n#### grid-row-nested($type)\r\nSets an element as the container for your columns inside another column.\r\n\r\n- **$type** [default: **$grid-type**] - The [type](#types) of grid to be used.\r\n\r\n```sass\r\n.grid-row\r\n    @include grid-row-nested(left)\r\n```\r\n\r\n***\r\n\r\n#### grid-column($columns, $type)\r\nSets **all** the properties of a column.\r\n\r\n- **$columns** - The number of columns to span in the row.\r\n- **$type** [default: **$grid-type**] - The [type](#types) of grid to be used.\r\n\r\n```sass\r\n.grid-column\r\n    @include grid-column(6)\r\n```\r\n\r\n***\r\n\r\n#### grid-column-width($columns, $type)\r\nSet **only the width** of a column.\r\n\r\n**Note:** This mixin is called automatically when using the ```grid-column()``` mixin. You'll probably only want to use this directly if you need to keep your selectors very DRY.\r\n\r\n- **$columns** - The number of columns to span in the row.\r\n- **$type** [default: **$grid-type**] - The [type](#types) of grid to be used.\r\n\r\n```sass\r\n.grid-column\r\n    @include grid-column-width(6)\r\n```\r\n\r\n***\r\n\r\n#### grid-column-base()\r\nSet **only the base** properties of a column.\r\n\r\n**Note:** This mixin is called automatically when using the ```grid-column()``` mixin. You'll probably only want to use this directly if you need to keep your selectors very DRY.\r\n\r\n\r\n```sass\r\n[class^=\"grid-column-\"]\r\n  @include grid-column-base()\r\n\r\n.grid-column-1\r\n    @include grid-column-gutter(4)\r\n\r\n.grid-column-2\r\n    @include grid-column-gutter(8)\r\n```\r\n\r\n***\r\n\r\n#### grid-column-gutter($columns, $type)\r\nSet **only the gutter** properties of a column.\r\n\r\n**Note:** This mixin is called automatically when using the ```grid-column()``` mixin. You'll probably only want to use this directly if you need to keep your selectors very DRY.\r\n\r\n- **$columns** - The number of columns to span in the row.\r\n- **$type** [default: **$grid-type**] - The [type](#types) of grid to be used.\r\n\r\n```sass\r\n.grid-column\r\n    @include grid-column-gutter(6)\r\n```\r\n\r\n***\r\n\r\n#### grid-column-offset-right($columns, $type)\r\nSets **all** the properties to offset the column from the right. *(prepends empty columns)*\r\n\r\n- **$columns** - The number of columns to offset by.\r\n- **$type** [default: **$grid-type**] - The [type](#types) of grid to be used.\r\n\r\n```sass\r\n.grid-column\r\n    @include grid-column-offest-right(6)\r\n```\r\n\r\n***\r\n\r\n#### grid-column-offset-left($columns, $type)\r\nSets **all** the properties to offset the column from the left. *(appends empty columns)*\r\n\r\n- **$columns** - The number of columns to offset by.\r\n- **$type** [default: **$grid-type**] - The [type](#types) of grid to be used.\r\n\r\n```sass\r\n.grid-column\r\n    @include grid-column-offest-left(6)\r\n```\r\n\r\n***\r\n\r\n#### grid-column-push($columns, $type)\r\nSets **all** the properties to push the column from the left. *(moves the column without affecting surrounding elements)*\r\n\r\n- **$columns** - The number of columns to push by.\r\n- **$type** [default: **$grid-type**] - The [type](#types) of grid to be used.\r\n\r\n```sass\r\n.grid-column\r\n    @include grid-column-push(6)\r\n```\r\n\r\n***\r\n\r\n#### grid-column-pull($columns, $type)\r\nSets **all** the properties to pull the column towards the left. *(moves the column without affecting surrounding elements)*\r\n\r\n- **$columns** - The number of columns to pull by.\r\n- **$type** [default: **$grid-type**] - The [type](#types) of grid to be used.\r\n\r\n```sass\r\n.grid-column\r\n    @include grid-column-pull(6)\r\n```\r\n\r\n\r\n# Functions\r\n\r\n#### grid-column-width($columns, $type)\r\nReturns the unitless (percentage based) width of a column.\r\n\r\n- **$columns** - The number of columns to take up in a row.\r\n- **$type** [default: **$grid-type**] - The [type](#types) of grid to be used.\r\n\r\n```sass\r\n.grid-column\r\n  width: #{grid-column-width(12)}%\r\n```\r\n\r\n***\r\n\r\n#### grid-column-offset($columns, $type)\r\nReturns the unitless (percentage based) offset width of a column.\r\n\r\n- **$columns** - The number of columns to offset by.\r\n- **$type** [default: **$grid-type**] - The [type](#types) of grid to be used.\r\n\r\n```sass\r\n.grid-column\r\n  left: #{grid-column-offset(12)}%\r\n```\r\n\r\n***\r\n\r\n#### grid-column-gutter($columns, $type)\r\nReturns the unitless (percentage based) gutter width of a column.\r\n\r\n- **$columns** - The number of columns to span in the row.\r\n- **$type** [default: **$grid-type**] - The [type](#types) of grid to be used.\r\n\r\n```sass\r\n.grid-column\r\n  margin-left: #{grid-column-gutter(12)}%\r\n```\r\n\r\n# Demo\r\n\r\nRun the following from the command line to build a demo project of the different types of grids provided.\r\n\r\n```bash\r\n$ compass create <project_name> -r gridgraphy -u gridgraphy/example\r\n```\r\n\r\n","google":"UA-27590471-2","note":"Don't delete this file! It's used internally to help with page regeneration."}